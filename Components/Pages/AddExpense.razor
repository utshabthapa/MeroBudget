@page "/addexpense"
@using MeroBudget.Models
@inject UserService UserService

<div class="flex align-items-center h-100">

    <div style="width:600px;" class="mx-auto bg-white rounded-2xl p-6 my-auto">

        <h1 class="text-center font-bold text-2xl">Add Expense</h1>

        <EditForm Model="newExpense" OnValidSubmit="HandleExpenseSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="text-red-600 font-semibold mb-4">@ErrorMessage</div>
            }

            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-1" for="amount">Amount</label>
                <InputNumber class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent" id="amount" @bind-Value="newExpense.Debit" placeholder="Enter amount" />
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-1" for="purpose">Purpose</label>
                <InputText class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent" id="purpose" @bind-Value="newExpense.Description" placeholder="Enter expense purpose" />
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-1" for="tags">Tags</label>
                <InputText class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent" id="tags" @bind-Value="newExpense.Tags" placeholder="Add tag" />
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-1" for="date">Date</label>
                <InputDate class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent" id="date" @bind-Value="newExpense.Date" placeholder="Enter date" />
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-1" for="additionalNotes">Additional Notes</label>
                <InputText class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent" id="additionalNotes" @bind-Value="newExpense.AdditionalNotes" />
            </div>

            <div class="text-center">
                <button class="w-full bg-red-700 text-white py-2 rounded-lg hover:bg-red-800 focus:ring-4 focus:ring-red-500 transition duration-200" type="submit">Add Expense</button>
            </div>

        </EditForm>
    </div>
</div>

@code {
    private AppData Data;
    private decimal cashInflow;
    private decimal cashOutflow;
    private decimal totalDebt;
    private decimal clearedDebt;
    private decimal remainingDebt;
    private decimal MainBalance;

    private Transactions newExpense = new Transactions();
    private string ErrorMessage;

    protected override void OnInitialized()
    {
        Data = UserService.LoadData();
        
    }

    private void HandleExpenseSubmit()
    {
       
        Data = UserService.LoadData();
        var transactions = Data.Transactions;

        // Fetching all transactions from AppData
        var debts = Data.Debt;
        totalDebt = debts.Sum(d => d.Amount);       // Total amount of all debts
        clearedDebt = debts.Sum(d => d.PaidAmount); // Total paid amount
        remainingDebt = totalDebt - clearedDebt;

        cashInflow = transactions.Sum(t => t.Credit) + remainingDebt - clearedDebt;
        cashOutflow = transactions.Sum(t => t.Debit);

        MainBalance = cashInflow - cashOutflow;

        if (newExpense.Debit > MainBalance)
        {
            ErrorMessage = "Insufficient balance to add this expense.";
            return;
        }

        newExpense.Id = Data.Transactions.Count + 1;
        newExpense.Date = newExpense.Date == default ? DateTime.Now : newExpense.Date;
        newExpense.Credit = 0; // No credit for expense
        newExpense.Debit = newExpense.Debit; // Ensure expense (debit) is being tracked
        Data.Transactions.Add(newExpense);
        UserService.SaveData(Data);

        // Reset form
        newExpense = new Transactions();
        ErrorMessage = null;
    }
}

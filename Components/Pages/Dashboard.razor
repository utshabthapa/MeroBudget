@page "/dashboard"
@using MeroBudget.Models
@inject UserService UserService

<div class="px- py-6 overflow-hidden">
    <!-- Greeting Section -->
    <div class="flex justify-between items-center my-6">

    <h1 class="text-4xl font-semibold ">Hello, Utshab!</h1>

    <!-- Date Filter Section -->
    <div class=" flex items-center gap-6">
        <button class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600"
                @onclick="() => ApplyDateFilter(DateFilter.LastMonth)">
            Last Month
        </button>
        <button class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600"
                @onclick="() => ApplyDateFilter(DateFilter.LastThreeMonths)">
            Last 3 Months
        </button>
        <div class="flex items-center gap-2">
            <input type="date" @bind="startDate" class="border p-2 rounded-md" />
            <input type="date" @bind="endDate" class="border p-2 rounded-md" />
            <button class="bg-gray-800 text-white px-4 py-2 rounded-md hover:bg-gray-900"
                    @onclick="() => ApplyDateFilter(DateFilter.CustomRange)">
                Apply
            </button>
        </div>
    </div>
    </div>
    <!-- Main Metrics Section -->
    <div class="grid grid-cols-3 gap-9 mt-10">
        <!-- Balance -->
        <div class="bg-blue-100 p-6 rounded-2xl shadow-sm">
            <h3 class="text-lg font-semibold">Balance</h3>
            <p class="text-3xl font-bold text-blue-600 mt-2">Rs.@filteredBalance.ToString("N0")</p>
        </div>
        <!-- Cash Inflow -->
        <div class="bg-green-100 p-6 rounded-2xl shadow-sm">
            <h3 class="text-lg font-semibold">Cash Inflow</h3>
            <p class="text-3xl font-bold text-green-600 mt-2">Rs.@filteredCashInflow.ToString("N0")</p>
        </div>
        <!-- Cash Outflow -->
        <div class="bg-red-100 p-6 rounded-2xl shadow-sm">
            <h3 class="text-lg font-semibold">Cash Outflow</h3>
            <p class="text-3xl font-bold text-red-600 mt-2">Rs.@filteredCashOutflow.ToString("N0")</p>
        </div>
        <!-- Total Debt -->
        <div class="bg-white p-6 rounded-2xl shadow-sm">
            <h3 class="text-lg font-semibold">Total Debt</h3>
            <p class="text-3xl font-bold text-red-600 mt-2">Rs.@filteredTotalDebt.ToString("N0")</p>
        </div>
        <!-- Cleared Debt -->
        <div class="bg-white p-6 rounded-2xl shadow-sm">
            <h3 class="text-lg font-semibold">Cleared Debt</h3>
            <p class="text-3xl font-bold text-green-600 mt-2">Rs.@filteredClearedDebt.ToString("N0")</p>
        </div>
        <!-- Remaining Debt -->
        <div class="bg-white p-6 rounded-2xl shadow-sm">
            <h3 class="text-lg font-semibold">Remaining Debt</h3>
            <p class="text-3xl font-bold text-yellow-600 mt-2">Rs.@filteredRemainingDebt.ToString("N0")</p>
        </div>
    </div>

    <div class="grid grid-cols-9 gap-9 mt-12">
       
        <div class="grid grid-row-3 col-span-2 gap-6 align-items-center ">
            <a href="addincome" class="bg-green-600 text-white p-10 rounded-xl shadow-sm text-center hover:bg-green-700">
                <span class="font-semibold">Add Income</span>
                <p class="text-sm">Create an income manually</p>
            </a>
            <a href="addexpense" class="bg-red-700 text-white p-10 rounded-xl shadow-sm text-center hover:bg-red-800">
                <span class="font-semibold">Add Expense</span>
                <p class="text-sm">Create an expense manually</p>
            </a>
            <a href="adddebt" class="bg-blue-500 text-white p-10 rounded-xl shadow-sm text-center hover:bg-blue-600">
                <span class="font-semibold">Add Debt</span>
                <p class="text-sm">Add Debts Manually</p>
            </a>
        </div>
        <!-- Top Transactions -->
        <div class="bg-white col-span-5 p-6 rounded-2xl shadow-sm">
            <h3 class="text-xl font-bold">Top 5 Transactions</h3>
            <table class="mt-4 w-full border-t border-gray-200">
                <thead class="bg-gray-200">
                    <tr class="text-left text-gray-500">
                        <th class="px-4 py-2">Transaction ID</th>
                        <th class="px-4 py-2">Type</th>
                        <th class="px-4 py-2">Labels</th>
                        <th class="px-4 py-2">Amount</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredTopTransactions != null && filteredTopTransactions.Any())
                    {
                        @foreach (var transaction in filteredTopTransactions)
                        {
                            <tr class="border-t">
                                <td class="border px-4 py-3">#TRNSC00-@transaction.Id</td>
                                <td class="border px-4 py-3">@transaction.Type</td>
                                <td class="border px-4 py-3">@transaction.Description</td>
                                <td class="border px-4 py-3">
                                    @(transaction.Credit > 0 ? "Rs." : "Rs.")
                                    @if (transaction.Credit > 0)
                                    {
                                        @transaction.Credit
                                    }
                                    else
                                    {
                                        @transaction.Debit
                                    }
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4" class="py-6 text-center text-gray-500 italic">No transactions found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <!-- Pending Debts -->
        <div class="bg-white col-span-2 rounded-2xl shadow-sm">
            <div class="bg-red-600 text-white text-xl font-bold px-4 py-3 rounded-t-2xl">Pending Debts</div>
            <table class="w-full text-sm border-t border-gray-300">
                <thead>
                    <tr class="bg-red-100 uppercase text-xs tracking-wide">
                        <th class="py-4 px-4 text-left">Debt ID</th>
                        <th class="py-4 px-4 text-left">Tag</th>
                        <th class="py-4 px-4 text-left">Amount</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredPendingDebts != null && filteredPendingDebts.Any())
                    {
                        @foreach (var debt in filteredPendingDebts)
                        {
                            <tr class="hover:bg-red-50 transition-colors border-t">
                                <td class="py-3 px-4 font-semibold">#DBT00-@debt.Id</td>
                                <td class="py-3 px-4">@debt.Tag</td>
                                <td class="py-3 px-4 font-bold text-red-600">Rs.@debt.Amount.ToString("N0")</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="3" class="py-6 text-center text-gray-500 italic">No pending debts found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private decimal filteredCashInflow, filteredCashOutflow, filteredBalance, filteredTotalDebt, filteredClearedDebt, filteredRemainingDebt;
    private List<Debt> filteredPendingDebts;
    private List<Transaction> filteredTopTransactions;
    private DateTime? startDate, endDate;
	private AppData Data;

    private enum DateFilter { LastMonth, LastThreeMonths, CustomRange }

    protected override void OnInitialized()
    {
		Data = UserService.LoadData();
        ApplyDateFilter(DateFilter.LastMonth);
    }

    private void LoadData()
    {
       
        var transactions = Data.Transactions;
        var debts = Data.Debt;

        filteredCashInflow = transactions.Sum(t => t.Credit);
        filteredCashOutflow = transactions.Sum(t => t.Debit);
        filteredBalance = filteredCashInflow - filteredCashOutflow;

        filteredTotalDebt = debts.Sum(d => d.Amount);
        filteredClearedDebt = debts.Sum(d => d.PaidAmount);
        filteredRemainingDebt = filteredTotalDebt - filteredClearedDebt;

        filteredPendingDebts = debts
            .Where(d => d.Amount > d.PaidAmount)
            .Select(d => new Debt { Id = d.Id, Amount = d.Amount - d.PaidAmount, Tag = d.Tag })
            .ToList();

        filteredTopTransactions = transactions
         .Select(t => new Transaction
             {
                 Id = t.Id,
                 Type = t.Credit > 0 ? "Credit" : "Debit",
                 Description = t.Description,
                 Credit = t.Credit,
                 Debit = t.Debit,
                 Date = t.Date,
                 Tags = t.Tags
             })
            .OrderByDescending(t => t.Credit > 0 ? t.Credit : t.Debit)
            .Take(5)
            .ToList();
    }

    private void ApplyDateFilter(DateFilter filter)
    {
        DateTime now = DateTime.Now;

        switch (filter)
        {
            case DateFilter.LastMonth:
                startDate = now.AddMonths(-1);
                endDate = now;
                break;

            case DateFilter.LastThreeMonths:
                startDate = now.AddMonths(-3);
                endDate = now;
                break;

            case DateFilter.CustomRange:
                if (!startDate.HasValue || !endDate.HasValue) return;
                break;
        }

        FilterData();
    }

    private void FilterData()
    {
        
        var transactions = Data.Transactions;
        var debts = Data.Debt;

        filteredCashInflow = transactions
            .Where(t => t.Date >= startDate && t.Date <= endDate)
            .Sum(t => t.Credit);

        filteredCashOutflow = transactions
            .Where(t => t.Date >= startDate && t.Date <= endDate)
            .Sum(t => t.Debit);

        filteredBalance = filteredCashInflow - filteredCashOutflow;

        filteredTotalDebt = debts
            .Where(d => d.Date >= startDate && d.Date <= endDate)
            .Sum(d => d.Amount);

        filteredClearedDebt = debts
       .Where(d => d.Date >= startDate && d.Date <= endDate)
       .Sum(d => d.PaidAmount);
        
        filteredRemainingDebt = filteredTotalDebt - filteredClearedDebt;

        filteredPendingDebts = debts
           .Where(d => d.Amount > d.PaidAmount && d.Date >= startDate && d.Date <= endDate)
           .Select(d => new Debt { Id = d.Id, Amount = d.Amount - d.PaidAmount, Tag = d.Tag })
           .ToList();

        filteredTopTransactions = transactions
         .Select(t => new Transaction
             {
                 Id = t.Id,
                 Type = t.Credit > 0 ? "Credit" : "Debit",
                 Description = t.Description,
                 Credit = t.Credit,
                 Debit = t.Debit,
                 Date = t.Date,
                 Tags = t.Tags
             })
            .Where(t => t.Date >= startDate && t.Date <= endDate)
            .OrderByDescending(t => t.Credit > 0 ? t.Credit : t.Debit)
            .Take(5)
            .ToList();
    }
    // Custom Transaction model for mapping
    public class Transaction
    {
        public int Id { get; set; }
        public string Type { get; set; }  // Either "Credit" or "Debit"
        public string Description { get; set; }
        public decimal Credit { get; set; }
        public decimal Debit { get; set; }
        public DateTime Date { get; set; }
        public string Tags { get; set; }
    }

    public class Debt
    {
        public int Id { get; set; }
        public int UserId { get; set; } // Link debt to a user
        public decimal Amount { get; set; } // Total debt amount
        public decimal PaidAmount { get; set; } // Amount paid towards debt
        public DateTime Date { get; set; }
        public string Description { get; set; }
        public string Tag { get; set; }
    }
}


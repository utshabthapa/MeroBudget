@page "/debt"
@using MeroBudget.Models
@inject UserService UserService

<div class="bg-white p-6 rounded-2xl mt-12">
     <div class="flex justify-between items-center mb-6">
        <h1 class="font-bold text-3xl">User Debts</h1>

        <div class="flex gap-8">
          
             <!-- Filter by Tags -->
            <div>
                <label for="tagFilter" class="block text-sm font-medium text-gray-700 mb-1">Tags</label>
                <select id="tagFilter" @onchange="FilterByTag" class="border border-gray-300 rounded-lg px-4 py-2">
                    <option value="All">All Tags</option>
                    @foreach (var tag in UniqueTags)
                    {
                            <option value="@tag">@tag</option>
                    }
                </select>
            </div>

             <div>
                <label for="dateFilter" class="block text-sm font-medium text-gray-700 mb-1">Filter by Date</label>
                <select id="dateFilter" @onchange="FilterByDate" class="border border-gray-300 rounded-lg px-4 py-2">
                    <option value="All">All Time</option>
                    <option value="LastMonth">Last Month</option>
                    <option value="Last3Months">Last 3 Months</option>
                    <option value="SpecificRange">Specific Date Range</option>
                </select>
            </div>

            <!-- Specific Date Range -->
            @if (SelectedDateFilter == "SpecificRange")
            {
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
                        <input type="date" @oninput="UpdateStartDate" class="border border-gray-300 rounded-lg px-4 py-2" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">End Date</label>
                        <input type="date" @oninput="UpdateEndDate" class="border border-gray-300 rounded-lg px-4 py-2" />
                    </div>
            }

            <!-- Search Filter -->
<!-- Search -->
            <div>
                <label for="search" class="block text-sm font-medium text-gray-700 mb-1">Search</label>
                <input type="text"
                       id="search"
                       placeholder="Search..."
                       @oninput="SearchDebts"
                       class="border border-gray-300 rounded-lg px-4 py-2 w-48" />
            </div>
        </div>
    </div>
    <div class="flex gap-6 mb-6">
        <div class="bg-green-100 border border-green-300 rounded-lg p-4 flex-1">
            <h2 class="text-green-700 font-medium text-lg">Total Debt</h2>
            <p class="text-green-900 font-bold text-2xl">Rs.@Data.Debt.Sum(d => d.Amount)</p>
        </div>
        <div class="bg-blue-100 border border-blue-300 rounded-lg p-4 flex-1">
            <h2 class="text-blue-700 font-medium text-lg">Remaining Debt</h2>
            <p class="text-blue-900 font-bold text-2xl">Rs.@Data.Debt.Sum(d => d.Amount - d.PaidAmount)</p>
        </div>
    </div>
    <div class="flex gap-6 mb-6">

        <!-- Highest Inflow -->
        <div class="bg-red-100 border border-red-300 rounded-lg p-4 flex-1">
            <h2 class="text-red-700 font-medium text-lg">Highest Debt</h2>
            <p class="text-red-900 font-bold text-2xl">
                @(HighestDebt != null ? "Rs." : "Rs.")
                @if (HighestDebt != null)
                {
                    @HighestDebt.Amount.ToString("")
                }
                else
                {
                <p>N / A</p>
                }
            </p>
        </div>

        <!-- Lowest Debt -->
        <div class="bg-red-100 border border-red-300 rounded-lg p-4 flex-1">
            <h2 class="text-red-700 font-medium text-lg">Lowest Debt</h2>
            <p class="text-red-900 font-bold text-2xl">
                @(LowestDebt != null ? "Rs." : "Rs.")

                @if (LowestDebt != null)
                {
                    @LowestDebt.Amount.ToString("")
                }
                else
                {
                <p>N / A</p>
                }
            </p>
        </div>


    </div>
    <div class="flex justify-end gap-4 mb-4">
        <button @onclick="SortByLatest" class="bg-gray-200 text-black text-sm tracking-wide px-4 py-2 rounded-lg hover:bg-gray-300">Sort by Latest</button>
        <button @onclick="SortByOldest" class="bg-gray-200 text-black text-sm tracking-wide px-4 py-2 rounded-lg hover:bg-gray-300">Sort by Oldest</button>
    </div>
    <div style="max-height: 400px;" class="w-full overflow-y-auto">
        <table class="table border-collapse border border-gray-300 w-full overflow-scroll">
            <thead class="bg-gray-200">
                <tr>
                    <th class="border px-4 py-2">Debt ID</th>
                    <th class="border px-4 py-2">Total Debt</th>
                    <th class="border px-4 py-2">Paid Amount</th>
                    <th class="border px-4 py-2">Remaining Debt</th>
                    <th class="border px-4 py-2">Status</th>
                    <th class="border px-4 py-2">Due Date</th>
                    <th class="border px-4 py-2">Tag</th>
                    <th class="border px-4 py-2">Description</th>
                    <th class="border px-4 py-2">Actions</th>
                </tr>
            </thead>
        <tbody>
            @foreach (var debt in FilteredDebts)
            {
                <tr>
                        <td class="border px-4 py-2">#DBT00-@debt.Id</td>
                        <td class="border border-gray-300 px-4 py-2">Rs.@debt.Amount</td>
                        <td class="border border-gray-300 px-4 py-2">Rs.@debt.PaidAmount</td>
                        <td class="border border-gray-300 px-4 py-2">Rs.@((debt.Amount - debt.PaidAmount).ToString("0.##"))</td>
                        <td class="border px-4 py-2">
                            @((debt.Amount - debt.PaidAmount) == 0 ? "Cleared" : "Pending")
                        </td>
                        <td class="border px-4 py-2">@debt.DueDate.ToString("MM/dd/yyyy")</td>
                        <td class="border px-4 py-2">@debt.Tag</td>
                    <td class="border border-gray-300 px-4 py-2">@debt.Description</td>
                    <td class="border border-gray-300 px-4 py-2">
                        <button class="bg-blue-500 text-white px-4 py- rounded hover:bg-blue-600" @onclick="() => OpenModal(debt)">Clear Debt</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    </div>
        <!-- Redirect to Add Debt Page -->
        <div class="text-center mt-6">
            <NavLink class="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 focus:ring-4 focus:ring-blue-500 transition duration-200" href="/adddebt">Add New Debt</NavLink>
        </div>
</div>

    @if (ShowModal)
    {
        <div class="fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center">
            <div class="bg-white rounded-lg p-6 shadow-lg w-1/3">
                <h2 class="text-xl font-bold mb-4">Clear Debt</h2>
                <p class="mb-4">Status: <strong>@((SelectedDebt.Amount - SelectedDebt.PaidAmount) == 0 ? "Cleared":"Pending")</strong></p>
            <p class="mb-4">Due Date: <strong>@SelectedDebt.DueDate</strong></p>

            <p class="mb-4">Remaining Amount: <strong>Rs.@((SelectedDebt.Amount - SelectedDebt.PaidAmount).ToString("0.##"))</strong></p>

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="text-red-600 font-semibold mb-4">@ErrorMessage</div>
                }

                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1" for="paidAmount">Paid Amount</label>
                    <InputNumber class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" id="paidAmount" @bind-Value="PaidAmount" placeholder="Enter paid amount" />
                </div>

                <div class="flex justify-end">
                    <button class="bg-gray-500 text-white px-4 py-2 rounded mr-2 hover:bg-gray-600" @onclick="CloseModal">Cancel</button>
                    <button class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600" @onclick="HandleDebtPayment">Submit</button>
                </div>
            </div>
        </div>
    }

@code {
    private AppData Data;
    private bool ShowModal = false;
    private Debt SelectedDebt;
    private decimal PaidAmount;
    private string ErrorMessage;
    private string SearchQuery = string.Empty;
    private string SelectedDateFilter = "All";
    private string SelectedTag = "All";
    private DateTime? StartDate;
    private DateTime? EndDate;
    private Debt HighestDebt;
    private Debt LowestDebt;


    private IEnumerable<Debt> FilteredDebts;
    private IEnumerable<string> UniqueTags;

    protected override void OnInitialized()
    {

        Data = UserService.LoadData();
        if (Data != null && Data.Debt != null)
        {
            UniqueTags = Data.Debt
                .Where(t => t.Tag != null)
                .SelectMany(t => t.Tag.Split(','))
                .Distinct()
                .ToList();

            FilteredDebts = Data.Debt;
            CalculateHighestDebts();

            ApplyFilters();

        }
        else
        {
            UniqueTags = new List<string>();
            CalculateHighestDebts();

            FilteredDebts = new List<Debt>();
        }
    }
    private void CalculateHighestDebts()
    {
        // Highest Inflow Transaction
        HighestDebt = FilteredDebts
            .Where(d => d.Amount > 0)
            .OrderByDescending(d => d.Amount)
            .FirstOrDefault();

        // Lowest Inflow Transaction
        LowestDebt = FilteredDebts
            .Where(d => d.Amount > 0)
            .OrderBy(d => d.Amount)
            .FirstOrDefault();

        
    }
    private void OpenModal(Debt debt)
    {
        SelectedDebt = debt;
        PaidAmount = 0;
        ErrorMessage = string.Empty;
        ShowModal = true;
    }

    private void CloseModal()
    {
        ShowModal = false;
    }

    private void HandleDebtPayment()
    {
        if (SelectedDebt == null) return;

        decimal remainingAmount = SelectedDebt.Amount - SelectedDebt.PaidAmount;

        if (PaidAmount > remainingAmount)
        {
            ErrorMessage = "Paid amount cannot exceed the remaining debt.";
            return;
        }

        SelectedDebt.PaidAmount += PaidAmount;

        // Save updated data
        UserService.SaveData(Data);

        // Reset modal state
        CloseModal();
    }

    private void FilterByTag(ChangeEventArgs e)
    {
        SelectedTag = e.Value.ToString();
        ApplyFilters();
    }

    private void FilterByDate(ChangeEventArgs e)
    {
        SelectedDateFilter = e.Value.ToString();
        ApplyFilters();
    }
    private void UpdateStartDate(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            StartDate = date;
            ApplyFilters();
        }
    }

    private void UpdateEndDate(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            EndDate = date;
            ApplyFilters();
        }
    }

    private void SearchDebts(ChangeEventArgs e)
    {
        SearchQuery = e.Value.ToString();
        ApplyFilters();
    }
    private void SortByLatest()
    {

        FilteredDebts = FilteredDebts.OrderByDescending(d => d.DueDate);
    }

    private void SortByOldest()
    {
        FilteredDebts = FilteredDebts.OrderBy(d => d.DueDate);
    }
    private IEnumerable<Debt> ApplyFilters()
    {
        FilteredDebts = Data.Debt;

        // Filter by Date
        if (SelectedDateFilter == "LastMonth")
        {
            var lastMonth = DateTime.Now.AddMonths(-1);
            FilteredDebts = FilteredDebts.Where(d => d.DueDate >= lastMonth);
        }
        else if (SelectedDateFilter == "Last3Months")
        {
            var last3Months = DateTime.Now.AddMonths(-3);
            FilteredDebts = FilteredDebts.Where(d => d.DueDate >= last3Months);
        }
        else if (SelectedDateFilter == "SpecificRange")
        {
            if (StartDate.HasValue)
            {
                FilteredDebts = FilteredDebts.Where(d => d.DueDate >= StartDate.Value);
            }

            if (EndDate.HasValue)
            {
                FilteredDebts = FilteredDebts.Where(d => d.DueDate <= EndDate.Value);
            }
        }

   
        if (SelectedTag != "All")
        {
            FilteredDebts = FilteredDebts.Where(t => t.Tag.Contains(SelectedTag));
        }

        // Filter by Search Query
        if (!string.IsNullOrWhiteSpace(SearchQuery))
        {
            FilteredDebts = FilteredDebts.Where(d =>
                d.Description.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                d.Tag.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)
            );
        }

        return FilteredDebts;
    }
}

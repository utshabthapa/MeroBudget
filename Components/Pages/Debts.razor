@page "/debt"
@using MeroBudget.Models
@inject UserService UserService

<div class="bg-white p-6 rounded-2xl mt-12">
    <h1 class="text-3xl font-bold mb-4">Debts</h1>
    <div class="flex gap-6 mb-6">
        <div class="bg-green-100 border border-green-300 rounded-lg p-4 flex-1">
            <h2 class="text-green-700 font-medium text-lg">Total Debt</h2>
            <p class="text-green-900 font-bold text-2xl">Rs.@Data.Debt.Sum(d => d.Amount)</p>
        </div>
        <div class="bg-blue-100 border border-blue-300 rounded-lg p-4 flex-1">
            <h2 class="text-blue-700 font-medium text-lg">Remaining Debt</h2>
            <p class="text-blue-900 font-bold text-2xl">Rs.@Data.Debt.Sum(d => d.Amount - d.PaidAmount)</p>
        </div>
    </div>
    <div style="max-height: 400px;" class="w-full overflow-y-auto">
        <table class="table border-collapse border border-gray-300 w-full overflow-scroll">
            <thead class="bg-gray-200">
                <tr>
                    <th class="border px-4 py-2">Debt ID</th>
                    <th class="border px-4 py-2">Total Debt</th>
                    <th class="border px-4 py-2">Paid Amount</th>
                    <th class="border px-4 py-2">Remaining Debt</th>
                    <th class="border px-4 py-2">Status</th>
                    <th class="border px-4 py-2">Date</th>
                    <th class="border px-4 py-2">Due Date</th>
                    <th class="border px-4 py-2">Tag</th>
                    <th class="border px-4 py-2">Description</th>
                    <th class="border px-4 py-2">Actions</th>
                </tr>
            </thead>
        <tbody>
            @foreach (var debt in Data.Debt)
            {
                <tr>
                        <td class="border px-4 py-2">#DBT00-@debt.Id</td>
                    <td class="border border-gray-300 px-4 py-2">@debt.Amount</td>
                    <td class="border border-gray-300 px-4 py-2">@debt.PaidAmount</td>
                    <td class="border border-gray-300 px-4 py-2">@((debt.Amount - debt.PaidAmount).ToString("0.##"))</td>
                        <td class="border px-4 py-2">
                            @((debt.Amount - debt.PaidAmount) == 0 ? "Cleared" : "Pending")
                        </td>
                        <td class="border px-4 py-2">@debt.Date.ToString("MM/dd/yyyy")</td>
                        <td class="border px-4 py-2">@debt.DueDate.ToString("MM/dd/yyyy")</td>
                        <td class="border px-4 py-2">@debt.Tag</td>
                    <td class="border border-gray-300 px-4 py-2">@debt.Description</td>
                    <td class="border border-gray-300 px-4 py-2">
                        <button class="bg-blue-500 text-white px-4 py- rounded hover:bg-blue-600" @onclick="() => OpenModal(debt)">Clear Debt</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    </div>
        <!-- Redirect to Add Debt Page -->
        <div class="text-center mt-6">
            <NavLink class="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 focus:ring-4 focus:ring-blue-500 transition duration-200" href="/adddebt">Add New Debt</NavLink>
        </div>
</div>

    @if (ShowModal)
    {
        <div class="fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center">
            <div class="bg-white rounded-lg p-6 shadow-lg w-1/3">
                <h2 class="text-xl font-bold mb-4">Clear Debt</h2>
                <p class="mb-4">Description: <strong>@SelectedDebt.Description</strong></p>
                <p class="mb-4">Remaining Amount: <strong>@((SelectedDebt.Amount - SelectedDebt.PaidAmount).ToString("0.##"))</strong></p>

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="text-red-600 font-semibold mb-4">@ErrorMessage</div>
                }

                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1" for="paidAmount">Paid Amount</label>
                    <InputNumber class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" id="paidAmount" @bind-Value="PaidAmount" placeholder="Enter paid amount" />
                </div>

                <div class="flex justify-end">
                    <button class="bg-gray-500 text-white px-4 py-2 rounded mr-2 hover:bg-gray-600" @onclick="CloseModal">Cancel</button>
                    <button class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600" @onclick="HandleDebtPayment">Submit</button>
                </div>
            </div>
        </div>
    }

@code {
    private AppData Data;
    private bool ShowModal = false;
    private Debt SelectedDebt;
    private decimal PaidAmount;
    private string ErrorMessage;

    protected override void OnInitialized()
    {
        Data = UserService.LoadData();
    }

    private void OpenModal(Debt debt)
    {
        SelectedDebt = debt;
        PaidAmount = 0;
        ErrorMessage = string.Empty;
        ShowModal = true;
    }

    private void CloseModal()
    {
        ShowModal = false;
    }

    private void HandleDebtPayment()
    {
        if (SelectedDebt == null) return;

        decimal remainingAmount = SelectedDebt.Amount - SelectedDebt.PaidAmount;

        if (PaidAmount > remainingAmount)
        {
            ErrorMessage = "Paid amount cannot exceed the remaining debt.";
            return;
        }

        SelectedDebt.PaidAmount += PaidAmount;

        // Save updated data
        UserService.SaveData(Data);

        // Reset modal state
        CloseModal();
    }
}
